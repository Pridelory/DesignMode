原型(Prototype)设计模式

原型模式属于对象的创建模式。通过给出一个原型对象来指明所有创建的对象的类型，然后用复制这个原型对象的办法创建出更多同类型的对象。这就是选型模式的用意。

Java类通过实现Clonable接口来表明其支持被克隆（虚拟机检查），否则会抛出CloneNotSupportedException异常。
Java被克隆类在实现Clonable接口后覆写了clone()方法，此克隆类型为"浅克隆"

注意事项：
1、使用原型模式赋值对象不会调用类的构造方法。其把单例模式破坏掉了。所以，原型模式与单例模式是冲突的。所以单例模式不能实现Clonable接口，实现了就完蛋了
2、不能有final对象
3、Object的clone()方法只能拷贝对象中的基本数据类型，对于数组、容器对象、引用对象都不会拷贝，这就是浅拷贝。反之，对于数组、容器对象、引用对象等拷贝了就是深拷贝

原型模式的结构
　　原型模式要求对象实现一个可以“克隆”自身的接口，这样就可以通过复制一个实例对象本身来创建一个新的实例。这样一来，通过原型实例创建新的对象，就不再需要关心这个实例本身的类型，
只要实现了克隆自身的方法，就可以通过这个方法来获取新的对象，而无须再去通过new来创建。

适用场合：
* 复制对象的结构和数据
* 希望对目标对象的修改不影响既有的原型对象
* 创建对象成本交大的时候

另外：可查看ArrayList的clone()源码



